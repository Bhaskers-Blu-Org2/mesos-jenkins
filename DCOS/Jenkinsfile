def DIAGNOSTICS_PACKAGE_URL = "http://dcos-win.westus2.cloudapp.azure.com/artifacts/mesos-jenkins-pr-testing/${BUILD_ID}/dcos-diagnostics/binaries/diagnostics.zip"
def METRICS_PACKAGE_URL = "http://dcos-win.westus2.cloudapp.azure.com/artifacts/mesos-jenkins-pr-testing/${BUILD_ID}/dcos-metrics/binaries/metrics.zip"
def MESOS_PACKAGE_URL = "http://dcos-win.westus2.cloudapp.azure.com/artifacts/mesos-jenkins-pr-testing/${BUILD_ID}/mesos/binaries/mesos-binaries.zip"
def DCOS_NET_PACKAGE_URL = "http://dcos-win.westus2.cloudapp.azure.com/artifacts/mesos-jenkins-pr-testing/${BUILD_ID}/dcos-net/release.zip"

def withGithubNotifier(String buildContext, Closure<Void> job) {
   setGitHubPullRequestStatus(context: buildContext, message: 'Build started', state: "PENDING")
   try {
        job()
        setGitHubPullRequestStatus(context: buildContext, message: 'Job status: SUCCESS', state: "SUCCESS")
        
   } catch(e) {
        echo 'Err: Build failed with Error -> ' + e.toString()
        setGitHubPullRequestStatus(context: buildContext, message: 'Job status: FAILURE', state: "ERROR")
        throw e
   }
}

def runBuild(String buildContext, String nodeName, Closure<Void> task) {
    node(nodeName) {
        stage(buildContext.tokenize('/').last()) {
            checkout scm
            withGithubNotifier ( buildContext, task )
        }
    }
}

// Windows Environment for running powershell scripts
def win_env(String command) {
    withCredentials([file(credentialsId: 'ae8d8ce4-a601-4e1b-9b53-4bb117fc3451', variable: 'SSH_KEY'),
                     usernamePassword(credentialsId: '8d70c82f-6959-49ad-a553-e7906ad47710',
                                     passwordVariable: 'JENKINS_PASSWORD', 
                                     usernameVariable: 'JENKINS_USER') ]) {
        println "Powershell executes -> $command"
        PowerShellWrapper(command)
    }
}

def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def buildDiagnostics = { win_env('mesos-jenkins/Diagnostics/start-windows-build.ps1') }
def buildMesos = { win_env(" \$newPath = \$env:Path -split ';' | Where-Object { \$_ -ne 'C:\\Program Files\\msys2\\usr\\bin\' } ; \$env:Path = \$newPath -join ';' ; & mesos-jenkins/Mesos/start-windows-build.ps1") }
def buildNet = { win_env('mesos-jenkins/Net/start-windows-build.ps1') }
def buildMetrics = { win_env('mesos-jenkins/Metrics/start-windows-build.ps1') }

// Pipeline Main script
parallel "Diagnostics build" : { runBuild('jenkins/diagnostics-testing', 'windows-build-server',   buildDiagnostics) },
         "Net build" :         { runBuild('jenkins/net-testing',         'windows-build-server',   buildNet) },
         "Mesos build" :       { runBuild('jenkins/mesos-testing',       'windows-build-server',   buildMesos) }, 
         "Metrics build" :     { runBuild('jenkins/metrics-testing',     'windows-build-server',   buildMetrics) }
